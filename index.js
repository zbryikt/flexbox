// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('main', ['ui.choices']);
x$.directive('ngIonSlider', ['$compile'].concat(function($compile){
  return {
    restrict: 'A',
    scope: {
      model: '=ngValue',
      config: '=config'
    },
    link: function(s, e, a, c){
      var config, isDouble, slider;
      config = s.config || {};
      isDouble = config.type === 'double';
      if (isDouble && !Array.isArray(s.model)) {
        s.model = [0, 100];
      }
      s.$watch('config', function(config){
        return slider.update(config);
      }, true);
      s.$watch('model', function(it){
        if (isDouble) {
          if (slider.result.from !== it[0]) {
            slider.update({
              from: it[0]
            });
          }
          if (slider.result.to !== it[1]) {
            return slider.update({
              to: it[1]
            });
          }
        } else {
          if (slider.result.from !== +it) {
            return slider.update({
              from: it
            });
          }
        }
      });
      $(e).ionRangeSlider(import$(import$({}, config), {
        onChange: function(v){
          return s.$apply(function(){
            if (isDouble) {
              if (s.model[0] !== v.from) {
                s.model[0] = v.from;
              }
              if (s.model[1] !== v.to) {
                return s.model[1] = v.to;
              }
            } else if (s.model !== v.from) {
              return s.model = v.from;
            }
          });
        }
      }));
      return slider = $(e).data('ionRangeSlider');
    }
  };
}));
x$.controller('main', ['$scope', '$interval'].concat(function($scope, $interval){
  var clipboard, direction, pseudocss, resize;
  $scope.nodes = [];
  $scope.trackEvent = function(cat, act, label, value){
    return ga('send', 'event', cat, act, label, value);
  };
  $scope.scrollto = function(sel, delay){
    sel == null && (sel = null);
    delay == null && (delay = 0);
    return setTimeout(function(){
      var top;
      top = sel ? $(sel).offset().top - 60 : 0;
      $(document.body).animate({
        scrollTop: top
      }, '500', 'swing', function(){});
      return $("html").animate({
        scrollTop: top
      }, '500', 'swing', function(){});
    }, delay);
  };
  $scope.itemCount = {
    config: {
      min: 10,
      max: 200,
      hide_min_max: true,
      hide_from_to: true,
      grid: false
    },
    value: 10
  };
  $scope.$watch('itemCount.value', function(){
    return $scope.init();
  });
  import$($scope, {
    randomWidth: false,
    randomHeight: false
  });
  $scope.init = function(){
    var i;
    return $scope.nodes = (function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = $scope.itemCount.value; i$ <= to$; ++i$) {
        i = i$;
        results$.push({
          w: $scope.randomWidth ? Math.random() * 110 + 20 : 30,
          h: $scope.randomHeight ? Math.random() * 50 + 10 : 30,
          p: Math.floor(Math.random() * 6) + 1
        });
      }
      return results$;
    }());
  };
  $scope.$watch('randomHeight', $scope.init);
  $scope.$watch('randomWidth', $scope.init);
  $scope.init();
  $scope.modal = {
    css: {
      toggled: false,
      toggle: function(v){
        this.toggled = v
          ? v
          : !this.toggled;
        if (this.toggled) {
          return $scope.trackEvent('flexbox', 'get', 'css');
        }
      }
    }
  };
  clipboard = new Clipboard('*[data-clipboard-target]');
  clipboard.on('success', function(e){
    $(e.trigger).tooltip({
      title: 'copied',
      trigger: 'click'
    }).tooltip('show');
    return setTimeout(function(){
      return $(e.trigger).tooltip('hide');
    }, 1000);
  });
  clipboard.on('error', function(e){
    $(e.trigger).tooltip({
      title: 'Press Ctrl+C to Copy',
      trigger: 'click'
    }).tooltip('show');
    return setTimeout(function(){
      return $(e.trigger).tooltip('hide');
    }, 1000);
  });
  direction = function(){
    return $scope.flexdirection = $scope.direction + ($scope.directionReverse ? "-reverse" : "");
  };
  $scope.$watch('direction', direction);
  $scope.$watch('directionReverse', direction);
  pseudocss = ".container:after {\n  display: block;\n  content: \" invisible node \";\n  flex: 999 999 auto;\n}";
  $scope.margin = {
    value: 5,
    config: {
      min: 0,
      max: 100
    }
  };
  $scope.flex = {
    grow: {
      value: 0,
      auto: false,
      config: {
        min: 0,
        max: 100
      }
    },
    shrink: {
      value: 0,
      auto: false,
      config: {
        min: 0,
        max: 100
      }
    },
    basis: {
      value: 0,
      auto: true,
      config: {
        min: 0,
        max: 1000
      }
    },
    get: function(){
      var g, s, b;
      g = this.grow.auto
        ? "auto"
        : this.grow.value;
      s = this.shrink.auto
        ? "auto"
        : this.shrink.value;
      b = this.basis.auto
        ? "auto"
        : this.basis.value;
      return "flex: " + g + " " + s + " " + b;
    }
  };
  $scope.$watch('flex.grow.auto', function(it){
    return $scope.flex.grow.config.disable = it;
  });
  $scope.$watch('flex.shrink.auto', function(it){
    return $scope.flex.shrink.config.disable = it;
  });
  $scope.$watch('flex.basis.auto', function(it){
    return $scope.flex.basis.config.disable = it;
  });
  $scope.update = function(){
    $scope.css = {
      container: "min-height: 400px;\n  display: flex;\n  display: -webkit-flex;\n  flex-wrap: " + $scope.wrapping[0] + ";\n  flex-direction: " + $scope.flexdirection + ";\n  justify-content: " + $scope.justify[0] + ";\n  align-items: " + $scope.align[0] + ";\n  align-content: " + $scope.multialign[0] + ";",
      item: "" + $scope.flex.get() + ";\n  margin: " + $scope.margin.value + "px;"
    };
    $scope.output = ".container {\n  " + $scope.css.container + "\n}\n" + ($scope.invisibleItem ? pseudocss : '') + "\n.item {\n  " + $scope.css.item + "\n}";
    return resize();
  };
  $scope.tags = ['Lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetuer', 'adipiscing', 'elit', 'Aenean', 'commodo', 'ligula', 'eget', 'dolor', 'Aenean', 'massa', 'Cum', 'sociis', 'natoque', 'penatibus', 'et', 'magnis', 'dis', 'parturient', 'montes', 'nascetur', 'ridiculus', 'mus', 'Donec', 'quam', 'felis', 'ultricies', 'nec', 'pellentesque', 'eu', 'pretium', 'quis', 'sem', 'Nulla', 'consequat', 'massa', 'quis', 'enim', 'Donec', 'pede', 'justo', 'fringilla', 'vel', 'aliquet', 'nec', 'vulputate', 'eget', 'arcu', 'In', 'enim', 'justo', 'rhoncus', 'ut', 'imperdiet', 'a', 'venenatis', 'vitae', 'justo', 'Nullam', 'dictum', 'felis', 'eu', 'pede', 'mollis', 'pretium', 'Integer', 'tincidunt', 'Cras', 'dapibus', 'Vivamus', 'elementum', 'semper', 'nisi', 'Aenean', 'vulputate', 'eleifend', 'tellus', 'Aenean', 'leo', 'ligula', 'porttitor', 'eu', 'consequat', 'vitae', 'eleifend', 'ac', 'enim', 'Aliquam', 'lorem', 'ante', 'dapibus', 'in', 'viverra', 'quis', 'feugiat', 'a', 'tellus', 'Phasellus', 'viverra', 'nulla', 'ut', 'metus', 'varius', 'laoreet', 'Quisque', 'rutrum', 'Aenean', 'imperdiet', 'Etiam', 'ultricies', 'nisi', 'vel', 'augue', 'Curabitur', 'ullamcorper', 'ultricies', 'nisi', 'Nam', 'eget', 'dui', 'Etiam', 'rhoncus', 'Maecenas', 'tempus', 'tellus', 'eg'];
  resize = function(){
    var x$, y$;
    x$ = document.querySelector('#preview').style;
    x$.width = (window.innerWidth - 550) + "px";
    y$ = document.querySelector('#root .detail').style;
    y$.width = (window.innerWidth - 550) + "px";
    return y$;
  };
  window.addEventListener('resize', resize);
  return $interval(function(){
    return $scope.update();
  }, 500);
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}